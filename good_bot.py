import logging
import os
import asyncio
import datetime as dt
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

# –ü—Ä–æ–≥—Ä–∞–º–º—ã –≥–æ–ª–æ–¥–∞–Ω–∏—è
FASTING_PROGRAMS = {
    "16/8": (16, 8),
    "18/6": (18, 6), 
    "20/4": (20, 4),
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FastingStates(StatesGroup):
    WAITING_PROGRAM = State()
    WAITING_TIME = State()
    CONFIRMATION = State()

# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ========================

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=program)] for program in FASTING_PROGRAMS],
        resize_keyboard=True
    )

    await message.answer(
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(FastingStates.WAITING_PROGRAM)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message(FastingStates.WAITING_PROGRAM)
async def program_handler(message: types.Message, state: FSMContext):
    if message.text not in FASTING_PROGRAMS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(program=message.text)
    await message.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /now —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await dp.fsm.set_state(user_id=message.from_user.id, state=FastingStates.WAITING_TIME)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(FastingStates.WAITING_TIME)
async def time_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.text == "/now":
        last_meal = dt.datetime.now()
    else:
        try:
            hours, minutes = map(int, message.text.split(":"))
            last_meal = dt.datetime.now().replace(
                hour=hours,
                minute=minutes,
                second=0,
                microsecond=0
            )
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return

    fasting_hours, eating_hours = FASTING_PROGRAMS[data["program"]]
    fasting_end = last_meal + dt.timedelta(hours=fasting_hours)
    window_end = last_meal + dt.timedelta(hours=eating_hours)

    await state.update_data(
        last_meal=last_meal,
        fasting_end=fasting_end,
        window_end=window_end
    )

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–∫–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    reminder_time = window_end + dt.timedelta(minutes=5)
    scheduler.add_job(
        send_reminder,
        "date",
        run_date=reminder_time,
        args=[message.chat.id],
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")],
            [types.KeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚ñ™ –ü—Ä–æ–≥—Ä–∞–º–º–∞: {data['program']}\n"
        f"‚ñ™ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º: {last_meal.strftime('%H:%M')}\n"
        f"‚ñ™ –û–∫–Ω–æ –ø–∏—Ç–∞–Ω–∏—è –¥–æ: {window_end.strftime('%H:%M')}\n"
        f"‚ñ™ –ì–æ–ª–æ–¥–∞–Ω–∏–µ –¥–æ: {fasting_end.strftime('%H:%M')}\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await dp.fsm.set_state(user_id=message.from_user.id, state=FastingStates.CONFIRMATION)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏
async def send_reminder(chat_id: int):
    await bot.send_message(
        chat_id,
        "üîÑ –í—ã –ø–æ–µ–ª–∏? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏, "
        "–Ω–∞–∂–º–∏—Ç–µ /edit_time",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message(FastingStates.CONFIRMATION)
async def confirmation_handler(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ":
        data = await state.get_data()
        await message.answer(
            f"‚è≥ –ì–æ–ª–æ–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –≤ {data['fasting_end'].strftime('%H:%M')}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
    elif message.text == "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
        await message.answer(
            "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–ß–ß:–ú–ú) –∏–ª–∏ /now",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await dp.fsm.set_state(user_id=message.from_user.id, state=FastingStates.WAITING_TIME)

# –ö–æ–º–∞–Ω–¥–∞ /edit_time
@dp.message(Command("edit_time"))
async def edit_time_handler(message: types.Message):
    await message.answer(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ (–ß–ß:–ú–ú) –∏–ª–∏ /now",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await dp.fsm.set_state(user_id=message.from_user.id, state=FastingStates.WAITING_TIME)

# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
