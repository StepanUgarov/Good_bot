import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
import random
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫
tongue_twisters = [
    "–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ –∏ —Å–æ—Å–∞–ª–∞ —Å—É—à–∫—É",
    "–ö–∞—Ä–ª —É –ö–ª–∞—Ä—ã —É–∫—Ä–∞–ª –∫–æ—Ä–∞–ª–ª—ã, –∞ –ö–ª–∞—Ä–∞ —É –ö–∞—Ä–ª–∞ —É–∫—Ä–∞–ª–∞ –∫–ª–∞—Ä–Ω–µ—Ç",
    "–û—Ç —Ç–æ–ø–æ—Ç–∞ –∫–æ–ø—ã—Ç –ø—ã–ª—å –ø–æ –ø–æ–ª—é –ª–µ—Ç–∏—Ç",
    "–ù–∞ –¥–≤–æ—Ä–µ —Ç—Ä–∞–≤–∞, –Ω–∞ —Ç—Ä–∞–≤–µ –¥—Ä–æ–≤–∞",
    "–ï—Ö–∞–ª –ì—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫—É, –≤–∏–¥–∏—Ç –ì—Ä–µ–∫–∞ ‚Äî –≤ —Ä–µ–∫–µ —Ä–∞–∫"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –¥–µ–Ω—å"))
keyboard.add(KeyboardButton("üó£ –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞"))
keyboard.add(KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–Ω–µ–π streak
user_streak = {}
user_last_day = {}

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–∏–∫—Ü–∏–∏ –∏ —Ä–µ—á–∏.\n–ù–∞–∂–º–∏ üéØ ¬´–ù–∞—á–∞—Ç—å –¥–µ–Ω—å¬ª ‚Äî –∏ –Ω–∞—á–Ω—ë–º!",
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "üéØ –ù–∞—á–∞—Ç—å –¥–µ–Ω—å")
async def start_day(message: types.Message):
    user_id = message.from_user.id
    today = datetime.now().date()

    last_day = user_last_day.get(user_id)
    if last_day == today:
        await message.answer("–¢—ã —É–∂–µ –Ω–∞—á–∞–ª —Å–µ–≥–æ–¥–Ω—è. –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ")
    else:
        user_last_day[user_id] = today
        streak = user_streak.get(user_id, 0) + 1
        user_streak[user_id] = streak
        await message.answer(
            f"üìù –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            f"1. –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\n"
            f"2. –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏ (3 –ø–æ–¥—Ö–æ–¥–∞)\n"
            f"3. –ü—Ä–æ–±–∫–∞/–∫–∞—Ä–∞–Ω–¥–∞—à –≤–æ —Ä—Ç—É ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
            f"4. –ú–∏–º–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º\n"
            f"5. –í–∏–¥–µ–æ/–∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å —Ä–µ—á–∏\n\n"
            f"üîÅ –°—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
            f"–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å ‚úÖ –∫–æ–≥–¥–∞ –≤—Å—ë —Å–¥–µ–ª–∞–µ—à—å!"
        )

@dp.message_handler(lambda message: message.text == "üó£ –°–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞")
async def send_tongue_twister(message: types.Message):
    twister = random.choice(tongue_twisters)
    await message.answer(f"üîà –í–æ—Ç —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∞:\n\n\"{twister}\"")

@dp.message_handler(lambda message: message.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ")
async def mark_done(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_streak:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–∏ üéØ")
    else:
        await message.answer("üî• –ú–æ–ª–æ–¥–µ—Ü! –î–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–æ –∑–∞–≤—Ç—Ä–∞ üôå")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)